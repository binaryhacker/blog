<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Binary Hacker Blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on Binary Hacker Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Jun 2017 18:41:47 +0530</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android HAL (Hardware Abstraction Layer)</title>
      <link>/post/android_hal/</link>
      <pubDate>Sun, 18 Jun 2017 18:41:47 +0530</pubDate>
      
      <guid>/post/android_hal/</guid>
      <description>Hardare Abstraction Layer is the software component which abstracts the hardware . In one context operating system is a hardware abstraction layer . In another context we can say a pheripheral driver is a hardware abstraction layer for that pheripheral hardware . Or some time we can use userspace drievers which does the job of abstracting the hardware .
Hardware Abstraction Layer in the context of android operating system is a binary blob which will talk to hardware .</description>
    </item>
    
    <item>
      <title>android boot.img</title>
      <link>/post/android_bootimg/</link>
      <pubDate>Wed, 14 Jun 2017 08:17:12 +0530</pubDate>
      
      <guid>/post/android_bootimg/</guid>
      <description>Android boog.img is a image format used by android to boot the kernel and a internal ram filesystem (rootfs) . This image have the following structure
struct boot_img_hdr { uint8_t magic[BOOT_MAGIC_SIZE]; uint32_t kernel_size; uint32_t kernel_addr; uint32_t ramdisk_size; uint32_t ramdisk_addr; uint32_t second_size; uint32_t second_addr; uint32_t tags_addr; uint32_t page_size; uint32_t unused[2]; uint8_t name[BOOT_NAME_SIZE]; uint8_t cmdline[BOOT_ARGS_SIZE]; uint32_t id[8]; uint8_t extra_cmdline[BOOT_EXTRA_ARGS_SIZE]; } __attribute__((packed));  This C structure defines the structure of the android bootimage format .</description>
    </item>
    
    <item>
      <title>Flashing Nexus 5 Factory Images</title>
      <link>/post/nexus_5_factory_flashing/</link>
      <pubDate>Tue, 13 Jun 2017 08:11:34 +0530</pubDate>
      
      <guid>/post/nexus_5_factory_flashing/</guid>
      <description>Recentry while trying to flash the android aosp hammerhead build to my Nexus 5 device, my device went into a bootloop . The device just hanged infinitely in the boot animation . To recover the device to working state , I had to flash the factory binaries to the device . So I did a quick google search and I came to know that google is maintaining all the nexus device factory images in this url https://developers.</description>
    </item>
    
    <item>
      <title>C Program Without Main Function</title>
      <link>/post/c-compilation-stages/</link>
      <pubDate>Thu, 18 May 2017 06:24:45 +0530</pubDate>
      
      <guid>/post/c-compilation-stages/</guid>
      <description>Let us see how we can write a c program without main as a function . To achieve this we need to understand how a C compiler compiles the C code . The compiler will pass through different stages while compiling the code to a binary format (elf).
C compilation stages While compiling a c program the compiler goes through different stages . The stages of the compiler are listed below .</description>
    </item>
    
  </channel>
</rss>